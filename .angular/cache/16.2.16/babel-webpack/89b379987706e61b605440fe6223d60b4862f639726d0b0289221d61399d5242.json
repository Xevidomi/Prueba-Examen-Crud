{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport class AuthService {\n  constructor() {\n    this.loggedIn = false;\n  }\n  // Método para simular el login (en un caso real, verificarías en un backend)\n  login(username, password) {\n    // Aquí deberías verificar las credenciales (puedes hacer una llamada HTTP)\n    if (username === 'admin' && password === 'admin123') {\n      this.loggedIn = true;\n      return true;\n    }\n    return false;\n  }\n  // Método para comprobar si el usuario está autenticado\n  isAuthenticated() {\n    return this.loggedIn;\n  }\n  // Método para hacer logout\n  logout() {\n    this.loggedIn = false;\n  }\n  static {\n    this.ɵfac = function AuthService_Factory(t) {\n      return new (t || AuthService)();\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthService,\n      factory: AuthService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["AuthService","constructor","loggedIn","login","username","password","isAuthenticated","logout","factory","ɵfac","providedIn"],"sources":["C:\\Users\\User\\examen-prueba\\ngecommerce\\src\\app\\services\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n  private loggedIn: boolean = false;\n\n  constructor() { }\n\n  // Método para simular el login (en un caso real, verificarías en un backend)\n  login(username: string, password: string): boolean {\n    // Aquí deberías verificar las credenciales (puedes hacer una llamada HTTP)\n    if (username === 'admin' && password === 'admin123') {\n      this.loggedIn = true;\n      return true;\n    }\n    return false;\n  }\n\n  // Método para comprobar si el usuario está autenticado\n  isAuthenticated(): boolean {\n    return this.loggedIn;\n  }\n\n  // Método para hacer logout\n  logout(): void {\n    this.loggedIn = false;\n  }\n}\n"],"mappings":";AAKA,OAAM,MAAOA,WAAW;EAGtBC,YAAA;IAFQ,KAAAC,QAAQ,GAAY,KAAK;EAEjB;EAEhB;EACAC,KAAKA,CAACC,QAAgB,EAAEC,QAAgB;IACtC;IACA,IAAID,QAAQ,KAAK,OAAO,IAAIC,QAAQ,KAAK,UAAU,EAAE;MACnD,IAAI,CAACH,QAAQ,GAAG,IAAI;MACpB,OAAO,IAAI;;IAEb,OAAO,KAAK;EACd;EAEA;EACAI,eAAeA,CAAA;IACb,OAAO,IAAI,CAACJ,QAAQ;EACtB;EAEA;EACAK,MAAMA,CAAA;IACJ,IAAI,CAACL,QAAQ,GAAG,KAAK;EACvB;;;uBAvBWF,WAAW;IAAA;EAAA;;;aAAXA,WAAW;MAAAQ,OAAA,EAAXR,WAAW,CAAAS,IAAA;MAAAC,UAAA,EAFV;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}